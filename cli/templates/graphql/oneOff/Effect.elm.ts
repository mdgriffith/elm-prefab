

function makeReplacements(replacements: Map<string, string>, source: string): string {
  let result = source;

  replacements.forEach((value, key) => {
      // Use a global regular expression for replacement
      const regex = new RegExp(key, 'g');
      result = result.replace(regex, value);
  });

  return result;
}

export const toBody = (replacements: Map<string, string>) => {
  return makeReplacements(replacements, "module Effect.{{name}} exposing (query, mutation)\n\n{-| -}\n\nimport Effect exposing (Effect)\nimport Effect.Http\nimport Json.Decode\nimport GraphQL.Engine\nimport Http\nimport {{name}}\n\nquery :\n    { onError : GraphQL.Engine.Error -> msg\n    , query : {{name}}.Query msg\n    }\n    -> Effect msg\nquery options =\n    let\n        { payload, decoder } =\n            GraphQL.Engine.queryToTestingDetails options.query\n    in\n    Effect.Http.request\n        { method = \"POST\"\n        , headers = []\n        , url = \"\"\n        , urlBase = Just Effect.UrlApi\n        , body = Http.jsonBody payload\n        , expect = expect options.onError decoder\n        , timeout = Nothing\n        , tracker = Nothing\n        }\n\n\nmutation :\n    { onError : GraphQL.Engine.Error -> msg\n    , mutation : {{name}}.Mutation msg\n    }\n    -> Effect msg\nmutation options =\n    let\n        { payload, decoder } =\n            GraphQL.Engine.mutationToTestingDetails options.mutation\n    in\n    Effect.Http.request\n        { method = \"POST\"\n        , headers = []\n        , url = \"\"\n        , urlBase = Just Effect.UrlApi\n        , body = Http.jsonBody payload\n        , expect = expect options.onError decoder\n        , timeout = Nothing\n        , tracker = Nothing\n        }\n\n\n{-| -}\nexpect : (GraphQL.Engine.Error -> msg) -> Json.Decode.Decoder msg -> Effect.Expect msg\nexpect fromError decoder =\n    Effect.ExpectStringResponse\n        (\\response ->\n            case responseToResult decoder response of\n                Ok data ->\n                    data\n\n                Err err ->\n                    fromError err\n        )\n\n\nresponseToResult : Json.Decode.Decoder data -> Http.Response String -> Result GraphQL.Engine.Error data\nresponseToResult decoder response =\n    case response of\n        Http.BadUrl_ url ->\n            Err (GraphQL.Engine.BadUrl url)\n\n        Http.Timeout_ ->\n            Err GraphQL.Engine.Timeout\n\n        Http.NetworkError_ ->\n            Err GraphQL.Engine.NetworkError\n\n        Http.BadStatus_ metadata responseBody ->\n            Err\n                (GraphQL.Engine.BadStatus\n                    { status = metadata.statusCode\n                    , responseBody = responseBody\n                    }\n                )\n\n        Http.GoodStatus_ metadata responseBody ->\n            let\n                bodyDecoder =\n                    Json.Decode.oneOf\n                        [ Json.Decode.map2\n                            (\\_ errs ->\n                                Err errs\n                            )\n                            (Json.Decode.field \"data\" (Json.Decode.null ()))\n                            (Json.Decode.field \"errors\"\n                                (Json.Decode.list gqlErrorDecoder)\n                            )\n                        , Json.Decode.field \"data\" decoder\n                            |> Json.Decode.map Ok\n                        , Json.Decode.field \"errors\"\n                            (Json.Decode.list gqlErrorDecoder)\n                            |> Json.Decode.map Err\n                        ]\n            in\n            case Json.Decode.decodeString bodyDecoder responseBody of\n                Ok (Ok success) ->\n                    Ok success\n\n                Ok (Err graphqlErrors) ->\n                    Err\n                        (GraphQL.Engine.ErrorField\n                            { errors = graphqlErrors\n                            }\n                        )\n\n                Err err ->\n                    Err\n                        (GraphQL.Engine.BadBody\n                            { responseBody = responseBody\n                            , decodingError = Json.Decode.errorToString err\n                            }\n                        )\n\n\n\n{-| A graphQL error specified here: <https://github.com/graphql/graphql-spec/blob/main/spec/Section%207%20--%20Response.md>\n-}\ngqlErrorDecoder : Json.Decode.Decoder GqlError\ngqlErrorDecoder =\n    Json.Decode.map4 GqlError\n        (Json.Decode.field \"message\" Json.Decode.string)\n        (Json.Decode.maybe (Json.Decode.field \"path\" (Json.Decode.list Json.Decode.string)))\n        (Json.Decode.maybe (Json.Decode.field \"locations\" (Json.Decode.list locationDecoder)))\n        (Json.Decode.maybe (Json.Decode.field \"extensions\" Json.Decode.value))\n\n\nlocationDecoder : Json.Decode.Decoder Location\nlocationDecoder =\n    Json.Decode.map2 Location\n        (Json.Decode.field \"line\" Json.Decode.int)\n        (Json.Decode.field \"column\" Json.Decode.int)\n\n\ntype alias GqlError =\n    { message : String\n    , path : Maybe (List String)\n    , locations : Maybe (List Location)\n    , extensions : Maybe Json.Decode.Value\n    }\n\n\ntype alias Location =\n    { line : Int\n    , column : Int\n    }\n")
}
