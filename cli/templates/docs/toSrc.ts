
import * as path from "path";
import * as fs from "fs";
import * as Options from "../../options";


export const Page_Guide = {
   moduleName: "Page.Guide",
   path: "/Page/Guide.elm",
   contents: "module Page.Guide exposing (page, Model, Msg)\n\n{-|\n\n@docs page, Model, Msg\n\n-}\n\nimport App.Page\nimport App.Page.Id\nimport App.Resources\nimport App.View\nimport App.View.Id\nimport Effect exposing (Effect)\nimport Html exposing (Html)\nimport Listen exposing (Listen)\n\n\n{-| -}\ntype alias Model =\n    {}\n\n\n{-| -}\ntype Msg\n    = ReplaceMe\n\n\npage : App.Page.Page App.Resources.Resources App.Page.Id.Guide_Params Msg Model\npage =\n    App.Page.page\n        { init = init\n        , update = update\n        , subscriptions = subscriptions\n        , view = view\n        }\n\n\ninit : App.Page.Id.Id -> App.Page.Id.Guide_Params -> App.Resources.Resources -> Maybe Model -> App.Page.Init Msg Model\ninit pageId params shared maybeCached =\n    App.Page.init {}\n\n\nupdate : App.Resources.Resources -> Msg -> Model -> ( Model, Effect Msg )\nupdate shared msg model =\n    ( model, Effect.none )\n\n\nsubscriptions : App.Resources.Resources -> Model -> Listen Msg\nsubscriptions shared model =\n    Listen.none\n\n\nview : App.View.Id.Id -> App.Resources.Resources -> Model -> App.View.View Msg\nview viewId shared model =\n    { title = \"Home\"\n    , body = Html.text \"Home\"\n    }\n"
}

export const Page_Home = {
   moduleName: "Page.Home",
   path: "/Page/Home.elm",
   contents: "module Page.Home exposing (page, Model, Msg)\n\n{-|\n\n@docs page, Model, Msg\n\n-}\n\nimport App.Page\nimport App.Page.Id\nimport App.Resources\nimport App.Route\nimport App.View\nimport App.View.Id\nimport Docs.Packages\nimport Effect exposing (Effect)\nimport Html\nimport Html.Attributes as Attr\nimport Listen exposing (Listen)\n\n\n{-| -}\ntype alias Model =\n    {}\n\n\n{-| -}\ntype Msg\n    = ReplaceMe\n\n\npage : App.Page.Page App.Resources.Resources App.Page.Id.Home_Params Msg Model\npage =\n    App.Page.page\n        { init = init\n        , update = update\n        , subscriptions = subscriptions\n        , view = view\n        }\n\n\ninit : App.Page.Id.Id -> App.Page.Id.Home_Params -> App.Resources.Resources -> Maybe Model -> App.Page.Init Msg Model\ninit pageId params shared maybeCached =\n    App.Page.init {}\n\n\nupdate : App.Resources.Resources -> Msg -> Model -> ( Model, Effect Msg )\nupdate shared msg model =\n    ( model, Effect.none )\n\n\nsubscriptions : App.Resources.Resources -> Model -> Listen Msg\nsubscriptions shared model =\n    Listen.none\n\n\nview : App.View.Id.Id -> App.Resources.Resources -> Model -> App.View.View Msg\nview viewId shared model =\n    { title = \"Directory\"\n    , body = viewPackages\n    }\n\n\nviewPackages =\n    Html.div []\n        [ Html.h1 [] [ Html.text \"Packages\" ]\n        , Html.div []\n            (List.map viewPackage Docs.Packages.directory)\n        ]\n\n\nviewPackage package =\n    Html.a\n        [ Attr.href\n            (App.Route.toString\n                (App.Route.Package { path_ = String.split \"/\" package.name })\n            )\n        ]\n        [ Html.text package.name ]\n"
}

export const Page_Module = {
   moduleName: "Page.Module",
   path: "/Page/Module.elm",
   contents: "module Page.Module exposing (page, Model, Msg)\n\n{-|\n\n@docs page, Model, Msg\n\n-}\n\nimport App.Page\nimport App.Page.Id\nimport App.Resources\nimport App.View\nimport App.View.Id\nimport Effect exposing (Effect)\nimport Html\nimport Listen exposing (Listen)\n\n\n{-| -}\ntype alias Model =\n    {}\n\n\n{-| -}\ntype Msg\n    = ReplaceMe\n\n\npage : App.Page.Page App.Resources.Resources App.Page.Id.Module_Params Msg Model\npage =\n    App.Page.page\n        { init = init\n        , update = update\n        , subscriptions = subscriptions\n        , view = view\n        }\n\n\ninit : App.Page.Id.Id -> App.Page.Id.Module_Params -> App.Resources.Resources -> Maybe Model -> App.Page.Init Msg Model\ninit pageId params shared maybeCached =\n    App.Page.init {}\n\n\nupdate : App.Resources.Resources -> Msg -> Model -> ( Model, Effect Msg )\nupdate shared msg model =\n    ( model, Effect.none )\n\n\nsubscriptions : App.Resources.Resources -> Model -> Listen Msg\nsubscriptions shared model =\n    Listen.none\n\n\nview : App.View.Id.Id -> App.Resources.Resources -> Model -> App.View.View Msg\nview viewId shared model =\n    { title = \"Module\"\n    , body = Html.text \"Module\"\n    }\n"
}

export const Page_Package = {
   moduleName: "Page.Package",
   path: "/Page/Package.elm",
   contents: "module Page.Package exposing (page, Model, Msg)\n\n{-|\n\n@docs page, Model, Msg\n\n-}\n\nimport App.Page\nimport App.Page.Id\nimport App.Resources\nimport App.View\nimport App.View.Id\nimport Docs.Packages\nimport Effect exposing (Effect)\nimport Elm.Docs\nimport Html exposing (Html)\nimport Html.Attributes as Attr\nimport Html.Events as Events\nimport Listen exposing (Listen)\n\n\n{-| -}\ntype alias Model =\n    { name : String\n    , modules : List Elm.Docs.Module\n    , focusedModule : Maybe String\n    }\n\n\n{-| -}\ntype Msg\n    = ModuleClicked String\n\n\npage : App.Page.Page App.Resources.Resources App.Page.Id.Package_Params Msg Model\npage =\n    App.Page.page\n        { init = init\n        , update = update\n        , subscriptions = subscriptions\n        , view = view\n        }\n\n\ninit : App.Page.Id.Id -> App.Page.Id.Package_Params -> App.Resources.Resources -> Maybe Model -> App.Page.Init Msg Model\ninit pageId params shared maybeCached =\n    let\n        key =\n            String.join \"/\" params.path_\n\n        docs =\n            List.foldl\n                (\\doc found ->\n                    case found of\n                        Just d ->\n                            found\n\n                        Nothing ->\n                            if doc.name == key then\n                                Just doc\n\n                            else\n                                Nothing\n                )\n                Nothing\n                Docs.Packages.directory\n    in\n    case docs of\n        Nothing ->\n            App.Page.notFound\n\n        Just doc ->\n            App.Page.init\n                { name = doc.name\n                , modules = doc.modules\n                , focusedModule =\n                    List.head doc.modules\n                        |> Maybe.map .name\n                }\n\n\nupdate : App.Resources.Resources -> Msg -> Model -> ( Model, Effect Msg )\nupdate shared msg model =\n    case msg of\n        ModuleClicked name ->\n            ( { model | focusedModule = Just name }\n            , Effect.none\n            )\n\n\nsubscriptions : App.Resources.Resources -> Model -> Listen Msg\nsubscriptions shared model =\n    Listen.none\n\n\ngetModule : List Elm.Docs.Module -> String -> Maybe Elm.Docs.Module\ngetModule modules name =\n    List.foldl\n        (\\mod found ->\n            case found of\n                Just m ->\n                    found\n\n                Nothing ->\n                    if mod.name == name then\n                        Just mod\n\n                    else\n                        Nothing\n        )\n        Nothing\n        modules\n\n\nview : App.View.Id.Id -> App.Resources.Resources -> Model -> App.View.View Msg\nview viewId shared model =\n    { title = model.name\n    , body =\n        Html.div []\n            [ Html.h1 [] [ Html.text model.name ]\n            , Html.div []\n                (List.map\n                    (\\mod ->\n                        Html.div\n                            [ Events.onClick (ModuleClicked mod.name)\n                            , Attr.style \"cursor\" \"pointer\"\n                            , Attr.style \"text-decoration\" \"underline\"\n                            ]\n                            [ Html.text mod.name ]\n                    )\n                    model.modules\n                )\n            , case Maybe.andThen (getModule model.modules) model.focusedModule of\n                Nothing ->\n                    Html.text \"\"\n\n                Just focusedModule ->\n                    viewModule focusedModule\n            ]\n    }\n\n\nviewModule : Elm.Docs.Module -> Html Msg\nviewModule mod =\n    Html.div []\n        [ Html.h2 [] [ Html.text mod.name ]\n        , Html.text mod.comment\n        , Html.div []\n            (mod\n                |> Elm.Docs.toBlocks\n                |> List.map\n                    viewBlock\n            )\n        ]\n\n\nviewBlock : Elm.Docs.Block -> Html Msg\nviewBlock block =\n    case block of\n        Elm.Docs.MarkdownBlock markdown ->\n            viewMarkdown markdown\n\n        Elm.Docs.UnionBlock details ->\n            Html.div []\n                [ viewMarkdown details.comment\n                ]\n\n        Elm.Docs.AliasBlock details ->\n            Html.div []\n                [ viewMarkdown details.comment\n                ]\n\n        Elm.Docs.ValueBlock details ->\n            Html.div []\n                [ viewMarkdown details.comment\n                ]\n\n        Elm.Docs.BinopBlock details ->\n            Html.div []\n                [ viewMarkdown details.comment\n                ]\n\n        Elm.Docs.UnknownBlock text ->\n            Html.text text\n\n\nviewMarkdown : String -> Html Msg\nviewMarkdown markdown =\n    Html.code []\n        [ Html.text markdown\n        ]\n"
}

export const Main = {
   moduleName: "Main",
   path: "/Main.elm",
   contents: "module Main exposing (main)\n\n{-| -}\n\nimport App\nimport App.Resources\nimport App.View\nimport Browser\nimport Effect exposing (Effect)\nimport Effect.Nav\nimport Html\nimport Listen\nimport Url\n\n\ntype alias Model =\n    {}\n\n\n{-| -}\nmain : App.App Model Msg\nmain =\n    App.app\n        { init =\n            \\resources flags url ->\n                ( {}, Effect.Nav.toUrl url )\n        , onUrlChange = UrlChanged\n        , onUrlRequest = UrlRequested\n        , update = update\n        , subscriptions =\n            \\resources model ->\n                Listen.none\n        , toCmd = toCmd\n        , toSub = toSub\n        , view =\n            \\resources toAppMsg model regions ->\n                case regions.primary of\n                    Nothing ->\n                        { title = \"Nothing\"\n                        , body = [ Html.text \"Nothing\" ]\n                        }\n\n                    Just (App.Loading _) ->\n                        { title = \"Loading\"\n                        , body = [ Html.text \"Loading\" ]\n                        }\n\n                    Just App.NotFound ->\n                        --\n                        { title = \"Not found\"\n                        , body = [ Html.text \"Not found\" ]\n                        }\n\n                    Just (App.Error error) ->\n                        -- error is a type you control that lives at App.Page.Error\n                        { title = \"Not found\"\n                        , body = [ Html.text \"Not found\" ]\n                        }\n\n                    Just (App.View page) ->\n                        view resources toAppMsg model page\n        }\n\n\ntoSub : App.Resources.Resources -> App.SubOptions Msg -> Model -> Listen.Listen (App.Msg Msg) -> Sub (App.Msg Msg)\ntoSub resources options model sub =\n    Listen.toSubscription options sub\n\n\ntoCmd : App.Resources.Resources -> App.CmdOptions Msg -> Model -> Effect.Effect (App.Msg Msg) -> Cmd (App.Msg Msg)\ntoCmd resources options model effect =\n    Effect.toCmd options\n        (\\urlBase ->\n            case urlBase of\n                Effect.UrlApi ->\n                    { headers = []\n                    , urlBase = \"\"\n                    }\n\n                Effect.UrlStaticFile ->\n                    { headers = []\n                    , urlBase = \"\"\n                    }\n\n                Effect.UrlCustom base ->\n                    { headers = []\n                    , urlBase = base\n                    }\n        )\n        effect\n\n\nview :\n    App.Resources.Resources\n    -> (Msg -> App.Msg Msg)\n    -> Model\n    -> App.View.View (App.Msg Msg)\n    -> Browser.Document (App.Msg Msg)\nview resources toAppMsg model innerView =\n    { title = innerView.title\n    , body =\n        [ innerView.body\n        ]\n    }\n\n\ntype Msg\n    = UrlChanged Url.Url\n    | UrlRequested Browser.UrlRequest\n\n\nupdate : App.Resources.Resources -> Msg -> Model -> ( Model, Effect Msg )\nupdate resources msg model =\n    case msg of\n        UrlRequested (Browser.Internal url) ->\n            ( model, Effect.Nav.pushUrl (Url.toString url) )\n\n        UrlRequested (Browser.External urlStr) ->\n            ( model, Effect.Nav.load urlStr )\n\n        UrlChanged url ->\n            ( model, Effect.Nav.toUrl url )\n"
}

export const all = [
  Page_Guide,
  Page_Home,
  Page_Module,
  Page_Package,
  Main
]

export const copyTo = (baseDir: string, overwrite: boolean, skip: boolean, summary: Options.Summary) => {
   for (const file of all) {
      if (overwrite || (!fs.existsSync(path.join(baseDir, file.path)) && !skip)) {
        const filepath = path.join(baseDir, file.path);
        fs.mkdirSync(path.dirname(filepath), { recursive: true });
        fs.writeFileSync(filepath, file.contents);
        const generated = { outputDir: baseDir, path: filepath}
        Options.addGenerated(summary, generated);
      }
   }
}
